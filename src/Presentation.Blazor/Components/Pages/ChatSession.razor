@page "/chat"
@using Goodtocode.SemanticKernel.Presentation.Blazor.Models
@using Goodtocode.SemanticKernel.Presentation.Blazor.Services
@using Goodtocode.SemanticKernel.Presentation.Blazor.Utilities
@using Microsoft.AspNetCore.Components.Web
@inject IChatService ChatService
@inject UserService UserService

<PageTitle>Semantic Kernel Chat Session</PageTitle>

<h1>How can I help?</h1>

<div class="row">
    <div class="col-9">
        <div class="chat-history">
            @foreach (var message in currentSession?.Messages)
            {
                <div class="message">
                    <strong>@message.Role:</strong> @message.Content
                </div>
            }
        </div>

        <div class="input-group mb-3">
            <input @bind="Message" type="text" class="form-control" placeholder="Type your message here..." aria-label="Type your message here..." aria-describedby="button-send">
            <button class="btn btn-primary" type="button" id="button-send" @onclick="SubmitMessage">Send</button>
        </div>
    </div>
    <div class="col-3">
        <ul>
            @foreach (var session in chatSessions)
            {
                <li>@session.Title (@session.IsActive ? "Active" : "Inactive")</li>
            }
        </ul>
    </div>
</div>

@code {
    private string? Message { get; set; }
    private List<ChatSessionModel> chatSessions = new List<ChatSessionModel>();
    private ChatSessionModel? currentSession;

    protected override async Task OnInitializedAsync()
    {
        chatSessions = await ChatService.GetChatSessionsAsync();
        if (chatSessions.Any())
        {
            currentSession = chatSessions.First();
        }
    }

    private async Task SubmitMessage()
    {
        if (!string.IsNullOrEmpty(Message))
        {
            if (currentSession == null)
            {
                // Create new session
                currentSession = new ChatSessionModel
                {
                    Id = Guid.NewGuid(),
                    Title = "New Session",
                    AuthorId = Guid.NewGuid(),
                    Timestamp = DateTimeOffset.Now,
                    IsActive = true,
                    Messages = new List<ChatMessageModel>()
                };
                chatSessions.Add(currentSession);
            }

            var newMessage = new ChatMessageModel
            {
                Id = Guid.NewGuid(),
                ChatSessionId = currentSession.Id,
                Role = "User",
                Content = Message,
                Timestamp = DateTimeOffset.Now
            };

            currentSession.Messages?.Add(newMessage);
            await ChatService.SendMessageAsync(newMessage);
            Message = string.Empty;
        }
    }
}
