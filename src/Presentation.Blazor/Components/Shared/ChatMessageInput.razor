@using System.ComponentModel.DataAnnotations
@using Goodtocode.SemanticKernel.Presentation.Blazor.Models
@using Goodtocode.SemanticKernel.Presentation.Blazor.Services
@using Goodtocode.SemanticKernel.Presentation.Blazor.Utilities
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms

@inject IChatService chatService
@inject IUserService userService

@code{
    [Parameter] public ChatSessionsModel Sessions { get; set; } = new ChatSessionsModel();
    [Parameter] public EventCallback OnMessageSubmitted { get; set; }
}

<EditForm Model="messageModel" OnValidSubmit="SubmitMessage">    
    <div class="input-group mb-3">
        <InputText @bind-Value="messageModel.NewMessage" class="form-control" placeholder="Type your message here..." aria-label="Type your message here..." aria-describedby="button-send" @onkeydown="HandleEnterKey" />
        @* <button class="btn btn-primary" type="submit" id="button-send" disabled="@editContext is not null && !editContext.Validate()">Send</button> *@
        <button class="btn btn-primary" type="submit" id="button-send">Send</button>
    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>

@code
{
    private ChatMessageInputModel messageModel { get; set; } = new();
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(messageModel);
    }

    private async Task SubmitMessage()
    {
        if (editContext is not null && editContext.Validate())
        {
            if (Sessions.ActiveSession == null)
            {
                var newSession = new ChatSessionModel
                {
                    Id = Guid.NewGuid(),
                    Title = "New Session",
                    AuthorId = await userService.GetUserIdAsync(),
                    Timestamp = DateTimeOffset.Now,
                    IsActive = true,
                    Messages = new List<ChatMessageModel>()
                };                
                await chatService.CreateSessionAsync(newSession, messageModel.NewMessage);
            }
            else
            {
                var newMessageModel = new ChatMessageModel
                {
                    Id = Guid.NewGuid(),
                    ChatSessionId = Sessions.ActiveSession.Id,
                    Role = "User",
                        Content = messageModel.NewMessage,
                    Timestamp = DateTimeOffset.Now
                };
                await chatService.SendMessageAsync(Sessions.ActiveSession!, messageModel.NewMessage);
            }
            messageModel.NewMessage = string.Empty;
            editContext = new EditContext(messageModel);
            StateHasChanged();
            await OnMessageSubmitted.InvokeAsync();
        }
    }

    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && editContext is not null && editContext.Validate())
        {
            await SubmitMessage();
        }
    }

    public class ChatMessageInputModel
    {
        [Required(ErrorMessage = "Message is required.")]
        public string NewMessage { get; set; } = string.Empty;
    }
}
