@using Goodtocode.SemanticKernel.Presentation.Blazor.Components.Skeleton
@using Goodtocode.SemanticKernel.Presentation.Blazor.Pages.Chat.Models
@using Microsoft.AspNetCore.Components.Web

@inject IChatService chatService

@code
{
    [Parameter] public IEnumerable<ChatSessionModel>? Sessions { get; set; }
    [Parameter] public EventCallback<ChatSessionModel> OnSessionSelected { get; set; }    
    [Parameter] public EventCallback<ChatSessionModel> OnRenameSession { get; set; }

}

<div class="session-list mt-3">
    @if (Sessions?.Count() > 0)
    {
        foreach (var session in Sessions)
        {
            <div class="session-item mt-1 rounded-custom d-flex align-items-center justify-content-between @(session.IsSelected ? "bg-primary-translucent text-white" : "bg-white")"
            @onclick="() => SelectSessionAsync(session)">
                <p class="mb-0 flex-grow-1">
                    @(string.IsNullOrWhiteSpace(session.Title) ? "Untitled Session" : session.Title)
                </p>
                <button class="btn btn-link btn-sm p-0 ms-2" style="color: inherit; text-decoration: none;" title="More actions"
                @onclick="@(() => RenameSessionAsync(session))">
                    <span style="font-size: 1.5rem; line-height: 1;">&#x22EF;</span>
                </button>
            </div>
        }
    }
    else
    {
        <SkeletonList />
    }
</div>

@code
{
    private async Task SelectSessionAsync(ChatSessionModel selectedSession)
    {
        selectedSession.IsSelected = true;
        await OnSessionSelected.InvokeAsync(selectedSession);
        StateHasChanged();
    }

    private async Task RenameSessionAsync(ChatSessionModel session)
    {
        if (session != null)
        {
            chatService.RenameSession(session);
        }
        await OnRenameSession.InvokeAsync(session);
        StateHasChanged();
    }
}
