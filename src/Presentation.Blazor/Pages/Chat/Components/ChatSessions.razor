@using Goodtocode.SemanticKernel.Presentation.Blazor.Pages.Chat.Models
@using Goodtocode.SemanticKernel.Presentation.Blazor.Services
@using Goodtocode.SemanticKernel.Presentation.Blazor.Utilities
@using Microsoft.AspNetCore.Components.Web

@* @rendermode InteractiveServer *@

@code
{
    [Parameter] public IEnumerable<ChatSessionModel>? Sessions { get; set; }
    [Parameter] public EventCallback<ChatSessionModel> OnSessionSelected { get; set; }

    private async Task SelectSessionAsync(ChatSessionModel selectedSession)
    {
        DeactivateAllSessions();
        selectedSession.IsActive = true;
        await OnSessionSelected.InvokeAsync(selectedSession);
        StateHasChanged();
    }

    private void DeactivateAllSessions()
    {
        if (Sessions != null)
        {
            foreach (var session in Sessions)
            {
                session.IsActive = false;
            }
        }
        StateHasChanged();
    }
}

<button class="btn btn-primary" id="button-new" @onclick="DeactivateAllSessions">New Chat</button>
<div class="session-list">    
    @if (Sessions != null)
    {
        foreach (var session in Sessions)
        {
            <div class="session-item rounded-custom @(session.IsActive ? "bg-primary-translucent text-white" : "bg-light")"
                 @onclick="() => SelectSessionAsync(session)"
                 style="cursor: pointer;">
                <p>@(string.IsNullOrWhiteSpace(session.Title) ? "Untitled Session" : session.Title)</p>
            </div>
        }
    }
</div>